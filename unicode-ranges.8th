\ Unicode ranges
\ 2020-04-30 by Hexcolors60
\ Public domain.
\ Ref.
\ https://8th-dev.com/forum/index.php/topic,2045.0.html

(*
Unicode UTF-8
1 	000000-00007F 	0xxxxxxx
2 	000080-0007FF 	110xxxxx 10xxxxxx
3 	000800-00FFFF 	1110xxxx 10xxxxxx 10xxxxxx
4 	010000-10FFFF 	11110xxx 10xxxxxx 10xxxxxx 10xxxxxx


0  	U+0000 - U+FFFF 	Basic Multilingual Plane，BMP
1 	U+10000 - U+1FFFF 	Supplementary Multilingual Plane，SMP
2 	U+20000 - U+2FFFF 	Supplementary Ideographic Plane，SIP
3 	U+30000 - U+3FFFF 	Tertiary Ideographic Plane，TIP
4-13 	U+40000 - U+DFFFF 	Unused 	
14 	U+E0000 - U+EFFFF 	Supplementary Special-purpose Plane，SSP
15 	U+F0000 - U+FFFFF 	Private Use Area-A，PUA-A
16 	U+100000 - U+10FFFF 	Private Use Area-B，PUA-B
*)

: unew nip "mp%x" s:strfmt >r "var " r@ s:+ eval 0x1000 b:new b:clear r> eval ! ;
[ 0, 1, 2, 3, 14, 15, 16 ] var, all 
: init all @ ' unew a:each ;
: docheck (* n "mp0" -- *) " @" s:+ eval swap 0x10 n:/ 1 b:bit! drop ;
: ucheck nip dup 0x1f0000 n:band 0x10000 n:/ >s "mp" swap s:+ docheck ;
: check (* s -- *) ' ucheck s:each ;
: find1 (* buf n -- buf n1 *) repeat tuck b:@ 0 n:= not if swap break else swap n:1+ dup 0xfff n:> if break then then again ;

var buf var n1 var n2
: find0 (* buf n1 -- buf n1 n2 *)
  dup n:1+ n2 ! n1 ! buf ! 
  repeat 
    n2 @ 0xfff n:> if
      buf @ n1 @ n2 @ break
    else
      buf @ n2 @ b:@ nip
      0 n:= if
        buf @ n1 @ n2 @ break
      else
        n2 @ n:1+ n2 !
      then 
    then
  again 
;

var s var n var pre var n0
var data
: doshow1 (* buf -- *)
  buf ! s !
  0 n0 !
  repeat 
    n0 @ 0xfff n:> if
      break
    else
      buf @ n0 @ find1 dup n0 ! find0 n2 ! n1 @ drop
      n1 @ 0xfff n:< if
        n2 @ 0x1000 n:< if
          data @ n1 @ 0x80 * n @ n:+ a:push n2 @ 0x80 * n @ n:+ a:push drop
          n2 @ n:1+ n0 !
        else
          data @ n1 @ 0x80 * n @ n:+ a:push 0xffff @ n @ n:+ a:push drop
          0x1000 n0 !
        then
      else
        \ n0 @ n:1+ n0 !
        0x1000 n0 !
      then 
    then
  again 
;
: doshow (* n buf -- *)
  swap 0x10000 * n !
  doshow1
;
: ushow nip dup "mp" swap "%x" s:strfmt s:+ eval @ doshow ;
: show all @ ' ushow a:each data @ 0 1 a:! drop ;
: list1 nip hex "0x" . . ", " . decimal ; 
: list "unicode-ranges: [ " . data @ a:pop >r ' list1 a:each r> hex "0x" . . decimal " ], " . cr ;

: test a:new data ! "\u0045\u0043\u0053\u0020\u4e2d\u7684\u6982\u5ff5\u7f3a\u5931" check show list ;

\ ok> init
\ ok> test
\ unicode-ranges: [ 0x1, 0x80, 0x4e00, 0x4e80, 0x5900, 0x5980, 0x5f80, 0x6000, 0x6980, 0x6a00, 0x7680, 0x7700, 0x7f00, 0x7f80 ],

\ 8th 20.01 and 20.02
\ unicode-ranges: [ 0x0, ... ], will crash on Linux.
\ unicode-ranges: [ 0x1, 0x80, 0x4e00, 0xffff ] don't work. So I reduce the ranges.

\ In win10, 
\ The characters in the ranges don't display. 
\ 0x1, 0x80 is ok.
\ font: "C:/windows/fonts/mingliu.ttc"
\ font: "C:/windows/fonts/simkai.ttf"

\ [ 0x1, ... 0x7f80, ] is invalid json.

